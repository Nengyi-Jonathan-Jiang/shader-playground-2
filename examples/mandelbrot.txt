// GLSL

#define TOTAL_ITERATIONS 3200
#define BASE_ITERATIONS 100

float f(float x, float intensity) {
    return pow(x / intensity, intensity) * exp(intensity - x);
}

vec3 color(float shade) {
    float s = f(1.0 / (1.0 - pow(shade, 0.5)), 3.0);
    return vec3(0, pow(s, 2.0), s);
}

int iterate(vec2 z, vec2 c, int max_iterations) {
    for(int i = 0; i < TOTAL_ITERATIONS; i++) {
        z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;
        if(distance(z, vec2(0)) >= 20.0 || i >= max_iterations) {
            return i;
        }
    }
    return max_iterations;
}

int iterate_mandelbrot(vec2 point, int max_iterations) {
    return iterate(vec2(0), point, max_iterations);
}
int iterate_julia(vec2 point, int max_iterations) {
    return iterate(point, m_zoom.xy, max_iterations);
}

void main(){

    if(abs(fragCoord.x) <= 0.002) discard;

    int iterations, max_iterations;
    if(fragCoord.x <= 0.) {
        if (distance(fragCoord + vec2(0.5 / aspectRatio, 0), vec2(0)) <= 0.002) {
            fragColor = vec4(1.0, 0.5, 0.0, 1.0);
            return;
        }
        max_iterations = min(int(float(BASE_ITERATIONS) * log(2.71828 + m_zoom.z)), TOTAL_ITERATIONS);
        vec2 point = ((fragCoord + vec2(0.5 / aspectRatio, 0)) / m_zoom.z + m_zoom.xy);
        iterations = iterate_mandelbrot(point, max_iterations);
    }
    else {
        max_iterations = min(int(float(BASE_ITERATIONS) * log(2.71828 + j_zoom.z)), TOTAL_ITERATIONS);
        vec2 point = ((fragCoord - vec2(0.5 / aspectRatio, 0)) / j_zoom.z + j_zoom.xy);
        iterations = iterate_julia(point, max_iterations);
    }

    float iterations_percent = float(iterations) / (float(max_iterations) + 1.0);

    fragColor = vec4(color(iterations_percent), 1.0);
}

// JS: m_zoom

const zoomAmount = [0.7];
const zoomCenter = [-0.75, 0];

const clamp = (x, x_min, x_max) => {
    if(x < x_min) return x_min;
    if(x > x_max) return x_max;
    return x;
}

registerUniform("m_zoom", "vec3", (canvas, time, mousePosition, mouseButtons) => {
    if(mousePosition[0] <= -0.002 && mouseButtons != 0) {
        mousePosition = [mousePosition[0] + 0.5 * canvas.width / canvas.height, mousePosition[1]];

        const zoomMultiplier = ((mouseButtons & 1) ? 1.02 : 1) / ((mouseButtons & 2) ? 1.02 : 1);
        zoomCenter[0] = clamp(
            zoomCenter[0] + (zoomMultiplier - 1) * mousePosition[0] / zoomAmount,
            -2,
            2
        );
        zoomCenter[1] = clamp(
            zoomCenter[1] + (zoomMultiplier - 1) * mousePosition[1] / zoomAmount,
            -2,
            2
        );
        zoomAmount[0] = clamp(
            zoomAmount[0] * zoomMultiplier,
            0.7,
            1e5
        );
    }


    return [...zoomCenter, zoomAmount];
});

// JS: j_zoom

const zoomAmount = [0.7];
const zoomCenter = [0, 0];

const clamp = (x, x_min, x_max) => {
    if(x < x_min) return x_min;
    if(x > x_max) return x_max;
    return x;
}

registerUniform("j_zoom", "vec3", (canvas, time, mousePosition, mouseButtons) => {
    if(mousePosition[0] >= 0.002 && mouseButtons != 0) {
        mousePosition = [mousePosition[0] - 0.5 * canvas.width / canvas.height, mousePosition[1]];

        const zoomMultiplier = ((mouseButtons & 1) ? 1.02 : 1) / ((mouseButtons & 2) ? 1.02 : 1);
        zoomCenter[0] = clamp(
            zoomCenter[0] + (zoomMultiplier - 1) * mousePosition[0] / zoomAmount,
            -2,
            2
        );
        zoomCenter[1] = clamp(
            zoomCenter[1] + (zoomMultiplier - 1) * mousePosition[1] / zoomAmount,
            -2,
            2
        );
        zoomAmount[0] = clamp(
            zoomAmount[0] * zoomMultiplier,
            0.7,
            1e5
        );
    }


    return [...zoomCenter, zoomAmount];
});
